# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:13:10+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import (
    CallPhoneNumberAuthPostRequest,
    CompletePhoneNumberAuthPostRequest,
    CreateChannelPostRequest,
    FollowPostRequest,
    GetClubPostRequest,
    GetClubsForTopicPostRequest,
    GetCreateChannelTargetsPostRequest,
    GetFollowingPostRequest,
    GetOnlineFriendsPostRequest,
    GetProfilePostRequest,
    GetSuggestedClubInvitesPostRequest,
    GetSuggestedFollowsFriendsOnlyPostRequest,
    GetSuggestedFollowsSimilarPostRequest,
    GetSuggestedInvitesPostRequest,
    GetSuggestedSpeakersPostRequest,
    GetTopicPostRequest,
    InviteFromWaitlistPostRequest,
    InviteToAppPostRequest,
    JoinChannelPostRequest,
    LeaveChannelPostRequest,
    MePostRequest,
    RecordActionTrailsPostRequest,
    RefreshTokenPostRequest,
    ResendPhoneNumberAuthPostRequest,
    SearchClubsPostRequest,
    SearchUsersPostRequest,
    StartPhoneNumberAuthPostRequest,
    UpdateNotificationsPostRequest,
    UpdateUsernamePostRequest,
)

app = MCPProxy(
    description='Clubhouse API',
    title='Clubhouse API',
    version='1',
    servers=[{'url': 'https://www.clubhouseapi.com/api/'}],
)


@app.post('/call_phone_number_auth', tags=['phone_auth_management'])
def post_call_phone_number_auth(body: CallPhoneNumberAuthPostRequest = None):
    """
    Call phone number auth.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/check_for_update', tags=['application_update_tracking'])
def get_check_for_update(is_testflight: Optional[int] = None):
    """
    Clubhouse uses this to check for updates when app is not installed from App Store (eg TestFlight)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/check_waitlist_status', tags=['user_profile_management'])
def post_check_waitlist_status():
    """
    checks waitlist status.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/complete_phone_number_auth', tags=['phone_auth_management'])
def post_complete_phone_number_auth(body: CompletePhoneNumberAuthPostRequest = None):
    """
    Call phone number auth.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/create_channel',
    tags=['club_channel_operations', 'channel_participation_management'],
)
def post_create_channel(body: CreateChannelPostRequest = None):
    """
    creates a channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/follow', tags=['user_profile_management', 'user_suggestion_system'])
def post_follow(body: FollowPostRequest = None):
    """
    follows a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/get_actionable_notifications', tags=['registration_notification_handling'])
def get_get_actionable_notifications():
    """
    get actionable notifications (the bell again)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/get_all_topics', tags=['topic_handling_operations'])
def get_get_all_topics():
    """
    gets all topics.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/get_channels',
    tags=['club_channel_operations', 'channel_participation_management'],
)
def get_get_channels():
    """
    get all channels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/get_club', tags=['club_channel_operations', 'club_exploration_tools'])
def post_get_club(body: GetClubPostRequest = None):
    """
    gets club by id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/get_clubs_for_topic', tags=['club_channel_operations', 'club_exploration_tools']
)
def post_get_clubs_for_topic(body: GetClubsForTopicPostRequest = None):
    """
    looks up clubs by topic.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/get_create_channel_targets', tags=['club_channel_operations'])
def post_get_create_channel_targets(body: GetCreateChannelTargetsPostRequest = None):
    """
    is fetched when you tap Create Room
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/get_events', tags=['user_discovery_tools', 'club_exploration_tools'])
def get_get_events(
    is_filtered: Optional[bool] = None,
    page_size: Optional[int] = None,
    page: Optional[int] = None,
):
    """
    the Upcoming for You page
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/get_following',
    tags=['user_profile_management', 'club_channel_operations', 'user_discovery_tools'],
)
def post_get_following(body: GetFollowingPostRequest = None):
    """
    get a list of the users and clubs that this user is following. Returned users have bios truncated to ~80 characters.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/get_notifications', tags=['user_activity_analytics'])
def get_get_notifications(page_size: Optional[int] = None, page: Optional[int] = None):
    """
    get notifications (the bell icon)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/get_online_friends', tags=['user_profile_management', 'user_discovery_tools']
)
def post_get_online_friends(body: GetOnlineFriendsPostRequest = None):
    """
    gets online friends on the app homepage.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/get_profile', tags=['user_profile_management'])
def post_get_profile(body: GetProfilePostRequest = None):
    """
    looks up user profile by ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/get_release_notes', tags=['application_update_tracking'])
def post_get_release_notes():
    """
    gets release notes.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/get_settings',
    tags=['user_profile_management', 'registration_notification_handling'],
)
def get_get_settings():
    """
    get notification settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/get_suggested_club_invites',
    tags=['user_suggestion_system', 'user_discovery_tools', 'club_exploration_tools'],
)
def post_get_suggested_club_invites(body: GetSuggestedClubInvitesPostRequest = None):
    """
    find users to invite to clubs based on phone number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/get_suggested_follows_all',
    tags=['user_suggestion_system', 'user_discovery_tools'],
)
def get_get_suggested_follows_all(
    in_onboarding: Optional[bool] = None,
    page_size: Optional[int] = None,
    page: Optional[int] = None,
):
    """
    gets suggested follows during signup
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/get_suggested_follows_friends_only',
    tags=['user_suggestion_system', 'registration_notification_handling'],
)
def post_get_suggested_follows_friends_only(
    body: GetSuggestedFollowsFriendsOnlyPostRequest = None,
):
    """
    find people to follow by uploading contacts during signup
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/get_suggested_follows_similar',
    tags=['user_suggestion_system', 'user_discovery_tools'],
)
def post_get_suggested_follows_similar(
    body: GetSuggestedFollowsSimilarPostRequest = None,
):
    """
    find similar users. (The Sparkles button on Clubhouse's profile page)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/get_suggested_invites',
    description=""" (also see https://zerforschung.org/posts/clubhouse-telefonnummern-en/ for @zerforschung's analysis of the privacy implications of this API) """,
    tags=['user_suggestion_system', 'user_discovery_tools'],
)
def post_get_suggested_invites(body: GetSuggestedInvitesPostRequest = None):
    """
    find users to invite based on phone number.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/get_suggested_speakers', tags=['user_suggestion_system', 'user_discovery_tools']
)
def post_get_suggested_speakers(body: GetSuggestedSpeakersPostRequest = None):
    """
    gets suggested users when you start a private room
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/get_topic', tags=['topic_handling_operations'])
def post_get_topic(body: GetTopicPostRequest = None):
    """
    looks up topic by ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/get_users_for_topic',
    tags=[
        'club_channel_operations',
        'topic_handling_operations',
        'user_discovery_tools',
    ],
)
def get_get_users_for_topic(
    topic_id: Optional[int] = None,
    page_size: Optional[int] = None,
    page: Optional[int] = None,
):
    """
    looks up users by topic.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/get_welcome_channel',
    tags=['registration_notification_handling', 'user_profile_management'],
)
def get_get_welcome_channel():
    """
    called during signup
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/invite_from_waitlist', tags=['user_profile_management', 'user_discovery_tools']
)
def post_invite_from_waitlist(body: InviteFromWaitlistPostRequest = None):
    """
    wave to another user on the waitlist to give them access
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/invite_to_app',
    tags=['user_suggestion_system', 'registration_notification_handling'],
)
def post_invite_to_app(body: InviteToAppPostRequest = None):
    """
    invite a user to the app, using one of your invites
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/join_channel',
    tags=['channel_participation_management', 'club_channel_operations'],
)
def post_join_channel(body: JoinChannelPostRequest = None):
    """
    join a channel.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/leave_channel',
    tags=['channel_participation_management', 'club_channel_operations'],
)
def post_leave_channel(body: LeaveChannelPostRequest = None):
    """
    leave a channel.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/me', tags=['user_profile_management', 'user_discovery_tools'])
def post_me(body: MePostRequest = None):
    """
    gets user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/record_action_trails', tags=['user_activity_analytics'])
def post_record_action_trails(body: RecordActionTrailsPostRequest = None):
    """
    analytics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/refresh_token', tags=['token_operations_management'])
def post_refresh_token(body: RefreshTokenPostRequest = None):
    """
    gets an access_token from a refresh_token.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/resend_phone_number_auth', tags=['phone_auth_management'])
def post_resend_phone_number_auth(body: ResendPhoneNumberAuthPostRequest = None):
    """
    Resend phone number auth.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/search_clubs', tags=['club_channel_operations', 'club_exploration_tools'])
def post_search_clubs(body: SearchClubsPostRequest = None):
    """
    search clubs.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/search_users', tags=['user_discovery_tools', 'user_profile_management'])
def post_search_users(body: SearchUsersPostRequest = None):
    """
    search for users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/start_phone_number_auth', tags=['phone_auth_management'])
def post_start_phone_number_auth(body: StartPhoneNumberAuthPostRequest = None):
    """
    Starts phone number auth.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/update_notifications', tags=['registration_notification_handling'])
def post_update_notifications(body: UpdateNotificationsPostRequest = None):
    """
    updates notification during signup.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/update_username', tags=['user_profile_management'])
def post_update_username(body: UpdateUsernamePostRequest = None):
    """
    edits username.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
